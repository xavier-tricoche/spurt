//---------------------------------------------------------------------------
//
// Project:   FAnToM
// Module:    $RCSfile: FRefArray.icc,v $
// Language:  C++
// Date:      $Date: 2003/04/22 16:13:44 $
// Author:    $Author: garth $
// Version:   $Revision: 1.1 $
//
//---------------------------------------------------------------------------

#ifdef OUTLINE
#define inline
#endif

//---------------------------------------------------------------------------

#include <string.h>
#include "FMatrix.hh"
#include "FException.hh"

inline FRefArray::FRefArray()
{
}

inline FArray&FRefArray::operator=(const FArray&x)
{
#ifndef NODEBUG
  if(sizeOfArray!=x.sizeOfArray) {
    FInvalidDimensionException e;
    e.addTraceMessage("FArray& FRefArray::operator = (const FArray&x)");
    throw e;    
  }  
#endif
  memcpy(comp,x.comp,sizeOfArray*sizeof(*comp));
  return *this;
}

inline FRefArray::FRefArray(FArray&x)
{
  memcpy(this,&x,sizeof(x));
}

inline FRefArray::FRefArray(int Dimension,double*Comp)
{
  sizeOfArray=Dimension;
  comp=Comp;
}

inline FRefArray::~FRefArray()
{
  comp=0;sizeOfArray=0;
}

inline void FRefArray::setDimension(const int inDim)
{
  sizeOfArray=inDim;
}

inline void FRefArray::setCompPointer(double*Comp)
{
  comp=Comp;
}

inline FRefArray FMatrix::row(positive m)
{
  try{
#ifndef NODEBUG
    if (m >= dimy)
      throw FIndexOutOfBoundsException 
	("wanna hava an element that's not in me !!!");
#endif
    return FRefArray(dimx,comp+m*dimx);
  }
  catch(FException&e)
    {
      e.addTraceMessage("inline FRefArray FMatrix::row(positive m)");
      throw e;
    }
}

inline const FRefArray FMatrix::row(positive m) const
{
  try{
#ifndef NODEBUG
    if (m >= dimy)
      throw FIndexOutOfBoundsException 
	("wanna hava an element that's not in me !!!");
#endif
    return FRefArray(dimx,comp+m*dimx);
  }
  catch(FException&e)
    {
      e.addTraceMessage("const inline FRefArray FMatrix::row(positive m) const");
      throw e;
    }
}


#undef inline
