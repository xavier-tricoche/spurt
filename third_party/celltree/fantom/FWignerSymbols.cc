
#include "FWignerSymbols.hh"

namespace {
// This table has been stolen from the gsl, which has GNU License!!!!
#define FACT_TABLE_MAX  170
#define FACT_TABLE_SIZE (FACT_TABLE_MAX+1)
static struct {int n; double f; long i; } fact_table[FACT_TABLE_SIZE] = {
    { 0,  1.0,     1L     },
    { 1,  1.0,     1L     },
    { 2,  2.0,     2L     },
    { 3,  6.0,     6L     },
    { 4,  24.0,    24L    },
    { 5,  120.0,   120L   },
    { 6,  720.0,   720L   },
    { 7,  5040.0,  5040L  },
    { 8,  40320.0, 40320L },

    { 9,  362880.0,     362880L    },
    { 10, 3628800.0,    3628800L   },
    { 11, 39916800.0,   39916800L  },
    { 12, 479001600.0,  479001600L },

    { 13, 6227020800.0,                               0 },
    { 14, 87178291200.0,                              0 },
    { 15, 1307674368000.0,                            0 },
    { 16, 20922789888000.0,                           0 },
    { 17, 355687428096000.0,                          0 },
    { 18, 6402373705728000.0,                         0 },
    { 19, 121645100408832000.0,                       0 },
    { 20, 2432902008176640000.0,                      0 },
    { 21, 51090942171709440000.0,                     0 },
    { 22, 1124000727777607680000.0,                   0 },
    { 23, 25852016738884976640000.0,                  0 },
    { 24, 620448401733239439360000.0,                 0 },
    { 25, 15511210043330985984000000.0,               0 },
    { 26, 403291461126605635584000000.0,              0 },
    { 27, 10888869450418352160768000000.0,            0 },
    { 28, 304888344611713860501504000000.0,           0 },
    { 29, 8841761993739701954543616000000.0,          0 },
    { 30, 265252859812191058636308480000000.0,        0 },
    { 31, 8222838654177922817725562880000000.0,       0 },
    { 32, 263130836933693530167218012160000000.0,     0 },
    { 33, 8683317618811886495518194401280000000.0,    0 },
    { 34, 2.95232799039604140847618609644e38,  0 },
    { 35, 1.03331479663861449296666513375e40,  0 },
    { 36, 3.71993326789901217467999448151e41,  0 },
    { 37, 1.37637530912263450463159795816e43,  0 },
    { 38, 5.23022617466601111760007224100e44,  0 },
    { 39, 2.03978820811974433586402817399e46,  0 },
    { 40, 8.15915283247897734345611269600e47,  0 },
    { 41, 3.34525266131638071081700620534e49,  0 },
    { 42, 1.40500611775287989854314260624e51,  0 },
    { 43, 6.04152630633738356373551320685e52,  0 },
    { 44, 2.65827157478844876804362581101e54,  0 },
    { 45, 1.19622220865480194561963161496e56,  0 },
    { 46, 5.50262215981208894985030542880e57,  0 },
    { 47, 2.58623241511168180642964355154e59,  0 },
    { 48, 1.24139155925360726708622890474e61,  0 },
    { 49, 6.08281864034267560872252163321e62,  0 },
    { 50, 3.04140932017133780436126081661e64,  0 },
    { 51, 1.55111875328738228022424301647e66,  0 },
    { 52, 8.06581751709438785716606368564e67,  0 },
    { 53, 4.27488328406002556429801375339e69,  0 },
    { 54, 2.30843697339241380472092742683e71,  0 },
    { 55, 1.26964033536582759259651008476e73,  0 },
    { 56, 7.10998587804863451854045647464e74,  0 },
    { 57, 4.05269195048772167556806019054e76,  0 },
    { 58, 2.35056133128287857182947491052e78,  0 },
    { 59, 1.38683118545689835737939019720e80,  0 },
    { 60, 8.32098711274139014427634118320e81,  0 },
    { 61, 5.07580213877224798800856812177e83,  0 },
    { 62, 3.14699732603879375256531223550e85,  0 },
    { 63, 1.982608315404440064116146708360e87,  0 },
    { 64, 1.268869321858841641034333893350e89,  0 },
    { 65, 8.247650592082470666723170306800e90,  0 },
    { 66, 5.443449390774430640037292402480e92,  0 },
    { 67, 3.647111091818868528824985909660e94,  0 },
    { 68, 2.480035542436830599600990418570e96,  0 },
    { 69, 1.711224524281413113724683388810e98,  0 },
    { 70, 1.197857166996989179607278372170e100,  0 },
    { 71, 8.504785885678623175211676442400e101,  0 },
    { 72, 6.123445837688608686152407038530e103,  0 },
    { 73, 4.470115461512684340891257138130e105,  0 },
    { 74, 3.307885441519386412259530282210e107,  0 },
    { 75, 2.480914081139539809194647711660e109,  0 },
    { 76, 1.885494701666050254987932260860e111,  0 },
    { 77, 1.451830920282858696340707840860e113,  0 },
    { 78, 1.132428117820629783145752115870e115,  0 },
    { 79, 8.946182130782975286851441715400e116,  0 },
    { 80, 7.156945704626380229481153372320e118,  0 },
    { 81, 5.797126020747367985879734231580e120,  0 },
    { 82, 4.753643337012841748421382069890e122,  0 },
    { 83, 3.945523969720658651189747118010e124,  0 },
    { 84, 3.314240134565353266999387579130e126,  0 },
    { 85, 2.817104114380550276949479442260e128,  0 },
    { 86, 2.422709538367273238176552320340e130,  0 },
    { 87, 2.107757298379527717213600518700e132,  0 },
    { 88, 1.854826422573984391147968456460e134,  0 },
    { 89, 1.650795516090846108121691926250e136,  0 },
    { 90, 1.485715964481761497309522733620e138,  0 },
    { 91, 1.352001527678402962551665687590e140,  0 },
    { 92, 1.243841405464130725547532432590e142,  0 },
    { 93, 1.156772507081641574759205162310e144,  0 },
    { 94, 1.087366156656743080273652852570e146,  0 },
    { 95, 1.032997848823905926259970209940e148,  0 },
    { 96, 9.916779348709496892095714015400e149,  0 },
    { 97, 9.619275968248211985332842594960e151,  0 },
    { 98, 9.426890448883247745626185743100e153,  0 },
    { 99, 9.332621544394415268169923885600e155,  0 },
    { 100, 9.33262154439441526816992388563e157,  0 },
    { 101, 9.42594775983835942085162312450e159,  0 },
    { 102, 9.61446671503512660926865558700e161,  0 },
    { 103, 9.90290071648618040754671525458e163,  0 },
    { 104, 1.02990167451456276238485838648e166,  0 },
    { 105, 1.08139675824029090050410130580e168,  0 },
    { 106, 1.146280563734708354534347384148e170,  0 },
    { 107, 1.226520203196137939351751701040e172,  0 },
    { 108, 1.324641819451828974499891837120e174,  0 },
    { 109, 1.443859583202493582204882102460e176,  0 },
    { 110, 1.588245541522742940425370312710e178,  0 },
    { 111, 1.762952551090244663872161047110e180,  0 },
    { 112, 1.974506857221074023536820372760e182,  0 },
    { 113, 2.231192748659813646596607021220e184,  0 },
    { 114, 2.543559733472187557120132004190e186,  0 },
    { 115, 2.925093693493015690688151804820e188,  0 },
    { 116, 3.393108684451898201198256093590e190,  0 },
    { 117, 3.96993716080872089540195962950e192,  0 },
    { 118, 4.68452584975429065657431236281e194,  0 },
    { 119, 5.57458576120760588132343171174e196,  0 },
    { 120, 6.68950291344912705758811805409e198,  0 },
    { 121, 8.09429852527344373968162284545e200,  0 },
    { 122, 9.87504420083360136241157987140e202,  0 },
    { 123, 1.21463043670253296757662432419e205,  0 },
    { 124, 1.50614174151114087979501416199e207,  0 },
    { 125, 1.88267717688892609974376770249e209,  0 },
    { 126, 2.37217324288004688567714730514e211,  0 },
    { 127, 3.01266001845765954480997707753e213,  0 },
    { 128, 3.85620482362580421735677065923e215,  0 },
    { 129, 4.97450422247728744039023415041e217,  0 },
    { 130, 6.46685548922047367250730439554e219,  0 },
    { 131, 8.47158069087882051098456875820e221,  0 },
    { 132, 1.11824865119600430744996307608e224,  0 },
    { 133, 1.48727070609068572890845089118e226,  0 },
    { 134, 1.99294274616151887673732419418e228,  0 },
    { 135, 2.69047270731805048359538766215e230,  0 },
    { 136, 3.65904288195254865768972722052e232,  0 },
    { 137, 5.01288874827499166103492629211e234,  0 },
    { 138, 6.91778647261948849222819828311e236,  0 },
    { 139, 9.61572319694108900419719561353e238,  0 },
    { 140, 1.34620124757175246058760738589e241,  0 },
    { 141, 1.89814375907617096942852641411e243,  0 },
    { 142, 2.69536413788816277658850750804e245,  0 },
    { 143, 3.85437071718007277052156573649e247,  0 },
    { 144, 5.55029383273930478955105466055e249,  0 },
    { 145, 8.04792605747199194484902925780e251,  0 },
    { 146, 1.17499720439091082394795827164e254,  0 },
    { 147, 1.72724589045463891120349865931e256,  0 },
    { 148, 2.55632391787286558858117801578e258,  0 },
    { 149, 3.80892263763056972698595524351e260,  0 },
    { 150, 5.71338395644585459047893286526e262,  0 },
    { 151, 8.62720977423324043162318862650e264,  0 },
    { 152, 1.31133588568345254560672467123e267,  0 },
    { 153, 2.00634390509568239477828874699e269,  0 },
    { 154, 3.08976961384735088795856467036e271,  0 },
    { 155, 4.78914290146339387633577523906e273,  0 },
    { 156, 7.47106292628289444708380937294e275,  0 },
    { 157, 1.17295687942641442819215807155e278,  0 },
    { 158, 1.85327186949373479654360975305e280,  0 },
    { 159, 2.94670227249503832650433950735e282,  0 },
    { 160, 4.71472363599206132240694321176e284,  0 },
    { 161, 7.59070505394721872907517857094e286,  0 },
    { 162, 1.22969421873944943411017892849e289,  0 },
    { 163, 2.00440157654530257759959165344e291,  0 },
    { 164, 3.28721858553429622726333031164e293,  0 },
    { 165, 5.42391066613158877498449501421e295,  0 },
    { 166, 9.00369170577843736647426172359e297,  0 },
    { 167, 1.50361651486499904020120170784e300,  0 },
    { 168, 2.52607574497319838753801886917e302,  0 },
    { 169, 4.26906800900470527493925188890e304,  0 },
    { 170, 7.25741561530799896739672821113e306,  0 }};

} // anonymous namespace

#define ISODD(n) ((n)%2 == 1)

#define ISEVEN(n) ((n)%2 == 0)


  
#define PHASE(n) ( ((n)%2==1) ? -1.0:1.0)

namespace FMath
{
namespace FWignerSymbols
{

  double lnfact(int n)
  {
    eassert(n <= FACT_TABLE_MAX );
    return log( fact_table[n].f );
  }

  bool isTriangle( const int ja, const int jb, const int jc )
  {
    return(( jc <= ja+jb) && (jc >= abs(ja-jb)) && ISEVEN( ja+jb+jc));
  }
  
  double wignerRot( const int two_j, const int two_m1, const int two_m2, const double theta )
  {
    double result;

    int v, vmin, vmax, t1, t2, t3, t4, tv;


    double a, ct, st, a1, a2, a3, a4;
    
    if((two_j) < 0 || abs(two_m1) > two_j || abs(two_m2) > two_j
        || ISODD(two_j + two_m1) || ISODD(two_j+two_m2)) 
      THROW_DEFAULT_EXCEPTION( FException );

    result = 0.0;

    t1 = (two_j + two_m1) /2;
    t2 = (two_j - two_m2) /2;
    t3 = (two_m2 - two_m1) /2;
    t4 = (2* two_j + two_m1 - two_m2)/2;

    vmin = (-t3 < 0) ? 0: -t3;
    vmax = (t2 < t1) ? t2: t1;

    std::cout << "check 1" << std::endl;
    if(vmin > vmax)
      return result;

    std::cout << "check 2" << std::endl;

    ct = cos(theta*0.5);
    st = sin(theta*0.5);

    a1 = lnfact(t1);
    a2 = lnfact(t2);
    a3 = lnfact((two_j - two_m1)/2);
    a4 = lnfact((two_j + two_m2)/2);

    a = 0.5*(a1+a2+a3+a4);

    for(v = vmin; v <= vmax; ++v)
    {
      double b1, b2, b3, b4, b5, b6, b7, b8;
      int i1, i2;

      b1= lnfact(t1-v);
      b2= lnfact(t2-v);
      b3= lnfact(t3+v);
      b4= lnfact(v);

      b5 = a-b1-b2-b3-b4;

      b6 = exp(b5);

      tv = 2*v;
      i1 = t4-tv;
      i2 = t3+tv;

      b7 = pow(ct, i1);
      b8 = pow(st, i2);

      result += PHASE(v)*b6*b7*b8;
    }
    return result;
  }

  double lndelta( const int two_j1, const int two_j2, const int two_j3)
  {
    double a1, a2, a3, a4;
    a1 = lnfact(( two_j1 + two_j2 - two_j3) /2 );
    a2 = lnfact(( two_j1 - two_j2 + two_j3) /2 );
    a3 = lnfact((-two_j1 + two_j2 + two_j3) /2 );
    a4 = lnfact(( two_j1 + two_j2 + two_j3) /2 +1 );
    return 0.5*( a1+a2+a3-a4);
  }

  double ThreeJ( const int j1, const int j2, const int j3, const int m1, const int m2, const int m3)
  {
    int v, vmin, vmax, t1, t2, t3, t4, t5;
    double a, a1, a2, a3, a4, a5, a6, a7, a8;

    double result;
    
    if( j1 < 0 || j2 < 0 || j3 < 0 ||
        abs(m1) > j1 || abs(m2) > j2 || abs( m3 ) > j3 ||
        ISODD( j1+m1) || ISODD( j2+m2 ) || ISODD( j3+m3 ))
      THROW_DEFAULT_EXCEPTION( FException );

    result = 0.0;

    if((!isTriangle( j1, j2, j3 )) || (m1+m2+m3) != 0) return result;

    t1 = (j1+j2-j3)/2;
    t2 = (j1-m1)/2;
    t3 = (j2+m2)/2;
    t4 = (j3-j2+m1)/2;
    t5 = (j3-j1-m2)/2;

    vmin = (t4 < t5 ) ? -t4 : -t5;
    vmin = (vmin <0 ) ? 0 : vmin;

    vmax = t1;
    vmax = (t2 < vmax) ? t2:vmax;
    vmax = (t3 < vmax) ? t3:vmax;

    if(vmin > vmax) return result;

    a1 = lnfact( ( j1+m1 )/2 );
    a2 = lnfact( t2 );
    a3 = lnfact( t3 );
    a4 = lnfact( ( j2-m2 )/2);
    a5 = lnfact( ( j3+m3 )/2);
    a6 = lnfact( ( j3-m3 )/2);
    a7 = lndelta( j1, j2, j3 );
    
    // overflow?

    a = 0.5 * (a1+a2+a3+a4+a5+a6)+a7;

    for( v=vmin; v<=vmax; ++v )
    {
      a1 = lnfact( v );
      a2 = lnfact( t1-v );
      a3 = lnfact( t2-v );
      a4 = lnfact( t3-v );
      a5 = lnfact( t4+v );
      a6 = lnfact( t5+v );
      
      // overflow?

      a7 = a - (a1+a2+a3+a4+a5+a6);

      a8 = exp(a7);
      result += PHASE(v)*a8;
    }

    result *= PHASE((j1-j2-m3)/2);

    return result;
  }

  double SixJ(const int j1, const int j2, const int j3,
      const int j4, const int j5, const int j6 )
  {
    int v, vmin, vmax, t1, t2, t3, t4, t5, t6, t7;
    double a, a1, a2, a3, a4;

    if( j1<0 || j2 < 0 || j3 < 0 || j4 < 0 || j5 < 0 || j6 < 0 )
      THROW_DEFAULT_EXCEPTION( FException );

    double result = 0.0;

    if(!isTriangle( j1, j2, j3 ) ||
       !isTriangle( j1, j5, j6 ) ||
       !isTriangle( j4, j2, j6 ) ||
       !isTriangle( j4, j5, j3 ))
      return result;

    t1 = (j1+j2+j3) /2;
    t2 = (j1+j5+j6) /2;
    t3 = (j4+j2+j6) /2;
    t4 = (j4+j5+j3) /2;
    t5 = (j1+j2+j4+j5)/2;
    t6 = (j2+j3+j5+j6)/2;
    t7 = (j3+j1+j6+j4)/2;

    vmin = t1;
    vmin = (t2 > vmin) ? t2: vmin;
    vmin = (t3 > vmin) ? t3: vmin;
    vmin = (t4 > vmin) ? t4: vmin;

    vmax = t5;
    vmax = (t6 < vmax) ? t6 : vmax;
    vmax = (t7 < vmax) ? t7 : vmax;

    if(vmin > vmax ) return result;

    a1=lndelta(j1,j2,j3);
    a2=lndelta(j1,j5,j6);
    a3=lndelta(j4,j2,j6);
    a4=lndelta(j4,j5,j3);

    a=a1+a2+a3+a4;

    for(v = vmin; v <= vmax; ++v)
    {
      double b1,b2,b3,b4,b5,b6,b7,b8,b9,b10;
      b1=lnfact(v+1);
      b2=lnfact(v-t1);
      b3=lnfact(v-t2);
      b4=lnfact(v-t3);
      b5=lnfact(v-t4);
      b6=lnfact(t5-v);
      b7=lnfact(t6-v);
      b8=lnfact(t7-v);

      // overflow?
      
      b9 = a+b1-b2-b3-b4-b5-b6-b7-b8;

      b10 = exp(b9);

      result += b10*PHASE(v);
    }
    return result;
  }
  

double NineJ(const int j1, const int j2, const int j3,
      const int j4, const int j5, const int j6,
      const int j7, const int j8, const int j9)
{
  int k, kmin, kmax;

  if( j1 < 0 || j2 < 0 || j3 < 0 ||
      j4 < 0 || j5 < 0 || j6 < 0 ||
      j7 < 0 || j8 < 0 || j9 < 0 )
    THROW_DEFAULT_EXCEPTION( FException );

  double result = 0.0;

  if(!isTriangle( j1, j2, j3 ) ||
     !isTriangle( j4, j5, j6 ) ||
     !isTriangle( j7, j8, j9 ) ||
     !isTriangle( j1, j4, j7 ) ||
     !isTriangle( j2, j5, j8 ) ||
     !isTriangle( j3, j6, j9))
    return 0.0;

  kmin = abs( j1-j9 );
  kmin = ( abs( j8-j4) < kmin ) ? abs( j8 -j4) : kmin;
  kmin = ( abs( j6-j2) < kmin ) ? abs( j6 -j2) : kmin;

  kmax = j1+j9;
  kmax = (j8+j4 > kmax) ? j8+j4 : kmax;
  kmax = (j6+j2 > kmax) ? j6+j2 : kmax;

  if( kmax < kmin ) return 0.0;

  for( k = kmin; k <= kmax; k+=2 )
  {
    double a1, a2, a3;
    a1 =SixJ(j1,j4,j7,j8,j9, k );
    a2 =SixJ(j2,j5,j8,j4, k,j6 );
    a3 =SixJ(j3,j6,j9, k,j1,j2 );

    // overflow?

    result += (k+1.0)*PHASE(k)*a1*a2*a3;
  }
  return result;
}

} // namespace FWignerSymbols
} // namespace FMath

#if 0
// approach by Cheol Ho Choi et al: Rapid and Stable determination of ratation matrices between spherical harmonics by direct recursion
// Journal of chemical physics
double a(int l, int m1, int m2)
{
  if( l == m1 || -l == m1 ) return 0.0;
  return sqrt(((l+m1)*(l-m1))/((l+m2)*(l-m2)));
}

double b(int l, int m1, int m2)
{
  if( m1 == -l || m == -l+1) return 0.0;
  return sqrt(((l++m1)*(l+m1-1))/(2*(l+m2)*(l-m2)));
}

double c(int l,int m1,int m2)
{
  if( m1 == l || m1 == -l) return 0.0;
  return sqrt(2*((l+m1)*(l-m1))/((l+m2)*(l+m2-1)));
}

double d(int l, int m1, int m2)
{
  if( m1 == -l || m1 == (-l+1)) return 0.0;
  return sqrt(((l+m1)*(l+m1-1))/((l+m2)*(l+m2-1)));
}

// (-l+1 <= m2 <= +l-1
double D_A(int l, int m1 int m2)
{
  return a(l,m1,m2)*D(0,0)*D(l-1,m1,m2) + b(l,m1,m2)*D(1,0)*D(l-1,m1-1,m2) + b(l,-m1,m2)*D(-1,0)*D(l-1,m1+1,m2);
}

// -l<=m2 <= l-2
double D_C(int l, int m1, int m2)
{
  return c(l,m1,-m2)*D(0,-1)*D(l-1,m1,m2+1)
        +d(l,m1,-m2)*D(1,-1)*D(l-1,m1-1,m2+1)
        +d(l,-m1,-m2)*D(-1,-1)*D(l-1,m1+1,m2+1);
}

// -l+2 <=m2 <= l
double D_D(int l, int m1, int m2)
{
  return c(l,m1,m2)*D(0,1)*D(l-1,m1,m2-1)
    + d(l,m1,m2)*D(1,1)*D(l-1,m1-1,m2-1)
    + d(l,-m1,m2)*D(-1,1)*D(l-1,m1+1,m2-1);
}


double RealMatrixElement(int l, int m1, int m2)
{
  if(m2 == -l) // case 7.5, 7.6
  {
  }

  if(m2 == +l) // case 7.7, 7.8
  {
  }

  // 7.3, 7.4
#endif

