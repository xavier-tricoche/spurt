//---------------------------------------------------------------------------
//
// Project:   FAnToM
// Module:    $RCSfile: FArray.icc,v $
// Language:  C++
// Date:      $Date: 2004/08/02 13:51:25 $
// Author:    $Author: wiebel $
// Version:   $Revision: 1.19 $
//
//--------------------------------------------------------------------------- 
#undef inline

#include <string>
#include <cstring>
#include "FException.hh"
#include <ctype.h>
#include <cmath>
#include <cstring>

#ifdef OUTLINE
#define inline
#endif

//=====================================================================

inline unsigned int FArray::size(void) const
{
  return sizeOfArray;
}

//---------------------------------------------------------------------

inline double& FArray::operator() (unsigned int i)
{
#ifndef NODEBUG
  if (i>=sizeOfArray)
    THROW_DEFAULT_EXCEPTION( FIndexOutOfBoundsException );
#endif
  return comp[i];
}

//---------------------------------------------------------------------

inline const double& FArray::operator() (unsigned int i) const
{
#ifndef NODEBUG
  if (i>=sizeOfArray)
    THROW_DEFAULT_EXCEPTION( FIndexOutOfBoundsException );
#endif
  return comp[i];
}

//---------------------------------------------------------------------

inline double& FArray::operator[] (unsigned int i)
{
#ifndef NODEBUG
  if (i>=sizeOfArray)
    THROW_DEFAULT_EXCEPTION( FIndexOutOfBoundsException );
#endif
  return comp[i];
}

//---------------------------------------------------------------------

inline const double& FArray::operator[] (unsigned int i) const
{
#ifndef NODEBUG
  if (i>=sizeOfArray)
    THROW_DEFAULT_EXCEPTION( FIndexOutOfBoundsException );
#endif
  return comp[i];
}

//---------------------------------------------------------------------------

inline FArray& FArray::operator=(const std::vector<double>& a)
{
  if (a.size() != sizeOfArray)
    {
      sizeOfArray=a.size();
      delete[] comp;
      comp = new double[sizeOfArray];
    }

  std::vector<double>::const_iterator coords = a.begin();
  
  // copy the elements
  for (unsigned int j=0; j<sizeOfArray; j++)
    comp[j]= *coords++;
  return *this;
}

//---------------------------------------------------------------------

inline FArray& FArray::operator=(const FArray& a)
{
  if (&a == this) return *this;
  if (a.sizeOfArray != sizeOfArray)
    {
      sizeOfArray=a.sizeOfArray;
      delete[] comp;
      comp = new double[sizeOfArray];
    }
  memcpy(comp, a.comp, sizeOfArray*sizeof(double));
  return *this;
}

//---------------------------------------------------------------------
inline bool FArray::operator==(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  return ((a.sizeOfArray == sizeOfArray) && (memcmp(comp, a.comp, sizeOfArray*sizeof(double)) == 0));
}

//---------------------------------------------------------------------
inline bool FArray::operator!=(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  return ((a.sizeOfArray != sizeOfArray) || memcmp(comp, a.comp, sizeOfArray*sizeof(double)) != 0);
}
//---------------------------------------------------------------------
inline bool FArray::operator<(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (positive i=0; i<sizeOfArray; i++)
    if (comp[i] < a.comp[i])
      return true;
    else if (comp[i] > a.comp[i])
      return false;

  return false;
}
//---------------------------------------------------------------------
inline bool FArray::operator>(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (positive i=0; i<sizeOfArray; i++)
    if (comp[i] < a.comp[i])
      return false;
    else if (comp[i] > a.comp[i])
      return true;

  return false;
}

//---------------------------------------------------------------------

inline void FArray::operator+=(const FArray& a)
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  // Add...
  for (unsigned int i=0;i<sizeOfArray;i++)
   comp[i]+=a.comp[i];
}

//---------------------------------------------------------------------

inline void FArray::operator-=(const FArray& a)
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (unsigned int i=0;i<sizeOfArray;i++)
    comp[i]-=a.comp[i];
}

//---------------------------------------------------------------------

inline void FArray::operator*=(double d)
{
  for (unsigned int i=0;i<sizeOfArray;i++)
    comp[i]*=d;
}

//---------------------------------------------------------------------

inline FArray FArray::operator+(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  FArray result(*this);
  result+=a;
  return result;
}

//---------------------------------------------------------------------

inline FArray FArray::operator-(const FArray& a) const
{
#ifndef NODEBUG
  if (a.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  FArray result(*this);
  result-=a;
  return result;
}

//---------------------------------------------------------------------

inline FArray FArray::operator-() const
{
    FArray result(this->size());
    result-=*this;
    return result;
}

//---------------------------------------------------------------------

inline FArray FArray::operator*(double d) const
{
  FArray result(*this);
  result*=d;
  return result;
}

//---------------------------------------------------------------------

inline FArray operator*(double d,const FArray& a)
{
  FArray result(a.sizeOfArray);
  for (unsigned int i=0;i<a.sizeOfArray;i++)
    result.comp[i]=a.comp[i]*d;
  return result;
}

//---------------------------------------------------------------------

inline void FArray::plus(const FArray& arg, FArray& dst) const
{
#ifndef NODEBUG
  if ((arg.sizeOfArray!=sizeOfArray) || (dst.sizeOfArray!=sizeOfArray))
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (unsigned int i=0;i<sizeOfArray;i++)
    dst.comp[i]=arg.comp[i]+comp[i];
}

//---------------------------------------------------------------------

inline void FArray::minus(const FArray& arg, FArray& dst) const
{
#ifndef NODEBUG
  if ((arg.sizeOfArray!=sizeOfArray) || (dst.sizeOfArray!=sizeOfArray))
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (unsigned int i=0;i<sizeOfArray;i++)
    dst.comp[i]=comp[i]-arg.comp[i];
}

//---------------------------------------------------------------------

inline void FArray::mult(double arg, FArray& dst) const
{
#ifndef NODEBUG
  if (dst.sizeOfArray!=sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  for (unsigned int i=0;i<sizeOfArray;i++)
    dst.comp[i]=comp[i]*arg;
}

//---------------------------------------------------------------------

inline unsigned int FArray::getDimension() const
{
  return sizeOfArray;
}

//---------------------------------------------------------------------------

inline double FArray::operator*(const FArray &v) const
{
  unsigned int i;
  double result = 0.0;
  
  for (i=0; i<sizeOfArray; i++)
    result += comp[i] * v.comp[i];

  return result;
}
//---------------------------------------------------------------------------

inline double FArray::norm() const 
{
  unsigned int i;
  double normSquared = 0.0;
  
  for (i=0; i<sizeOfArray; i++)
    normSquared += comp[i] * comp[i];

  return sqrt( normSquared );
}

//---------------------------------------------------------------------------

inline double FArray::normSquare() const 
{
  unsigned int i;
  double normSquared = 0.0;
  
  for (i=0; i<sizeOfArray; i++)
    normSquared += comp[i] * comp[i];

  return  normSquared ;
}

//---------------------------------------------------------------------------

inline void FArray::getCoordinates(std::vector<double>& coords) const
{
  coords.resize(sizeOfArray);
  for (unsigned int i=0 ; i<sizeOfArray ; i++)
    coords[i] = comp[i];
}

//---------------------------------------------------------------------------

inline void FArray::getCoordinates(double* coords) const
{
  for (unsigned int i=0 ; i<sizeOfArray ; i++)
    coords[i] = comp[i];
}

//---------------------------------------------------------------------------

inline void FArray::crossProduct(const FArray &b, FArray &dest) const
{
#ifndef NODEBUG
  if (dest.sizeOfArray!=3)
    THROW_EXCEPTION( FInvalidDimensionException, "dimension of destination FArray not 3!!" );
  if (b.sizeOfArray!=3)
    THROW_EXCEPTION( FInvalidDimensionException, "dimension of second FArray not 3!!" );
  if (sizeOfArray!=3)
    THROW_EXCEPTION( FInvalidDimensionException, "dimension of first FArray not 3!!" );
#endif
  
  dest[0] = comp[1]*b[2] - comp[2]*b[1];
  dest[1] = comp[2]*b[0] - comp[0]*b[2];
  dest[2] = comp[0]*b[1] - comp[1]*b[0];
}

//---------------------------------------------------------------------------

inline FArray& FArray::crossProduct(const FArray &b)
{
#ifndef NODEBUG
  if ((sizeOfArray!=3) || (b.sizeOfArray!=3))
      THROW_EXCEPTION( FInvalidDimensionException, "dimension != 3" );
#endif
  double x = comp[1]*b[2] - comp[2]*b[1];
  double y = comp[2]*b[0] - comp[0]*b[2];
  double z = comp[0]*b[1] - comp[1]*b[0];
  comp[0]=x; comp[1]=y; comp[2]=z;
  return *this;
}

//---------------------------------------------------------------------------

inline FArray FArray::crossProductConst(const FArray &b) const
{
#ifndef NODEBUG
  if ((sizeOfArray!=3) || (b.sizeOfArray!=3))
      THROW_EXCEPTION( FInvalidDimensionException, "dimension != 3" );
#endif
  FArray result;	
  double x = comp[1]*b[2] - comp[2]*b[1];
  double y = comp[2]*b[0] - comp[0]*b[2];
  double z = comp[0]*b[1] - comp[1]*b[0];
  result=FArray(x,y,z);
  return result;
}

//---------------------------------------------------------------------------

inline FArray crossProduct(const FArray &a, const FArray &b) 
{
#ifndef NODEBUG
  if ( ( a.sizeOfArray != 3 ) || ( b.sizeOfArray != 3 ) )
    THROW_EXCEPTION( FInvalidDimensionException, "dimension != 3" );
#endif
  
  double x, y, z;
  x = a.comp[1]*b.comp[2] - a.comp[2]*b.comp[1];
  y = a.comp[2]*b.comp[0] - a.comp[0]*b.comp[2];
  z = a.comp[0]*b.comp[1] - a.comp[1]*b.comp[0];
  return FArray( x, y, z );
}

//---------------------------------------------------------------------------

inline double crossProduct2D(const FArray &a, const FArray &b) 
{
#ifndef NODEBUG
  if ( ( a.sizeOfArray != 2 ) || ( b.sizeOfArray != 2 ) )
    THROW_EXCEPTION( FInvalidDimensionException, "dimension != 2" );
#endif
  
  return ( a.comp[0]*b.comp[1] - a.comp[1]*b.comp[0] );
}
//---------------------------------------------------------------------------

inline void FArray::clear()
{
  unsigned int i;
  for (i=0 ; i<sizeOfArray ; i++)
    {
      comp[i] = 0.;
    }
}

//---------------------------------------------------------------------------

inline FArray& FArray::negate()
{
  unsigned int i;
  for(i=0; i<sizeOfArray ; ++i)
  {
    comp[i] = -comp[i];
  }
  return *this;
}

//---------------------------------------------------------------------------

inline FArray& FArray::positivate()
{
  unsigned int i;
  for(i=0; i<sizeOfArray; ++i)
  {
    if(comp[i]<0) comp[i] = -comp[i];
  }
  return *this;
}

//---------------------------------------------------------------------------

inline FArray& FArray::clipValues(double min, double max)
{
#ifndef NDEBUG
  if(max < min)
        THROW_EXCEPTION(FException, "bool FArray::clipValues(double mix, double max)--->  min > max");
#endif
  unsigned int i;
  for(i=0; i<sizeOfArray; ++i)
  {
    if(comp[i] < min) comp[i] = min;
    if(comp[i] > max) comp[i] = max;
  }
  return *this;
}

//---------------------------------------------------------------------------

inline void FArray::normalize()
{
  unsigned int i;
  double length = norm();
  
  if( length > 1e-15)
    {
      double reciprocalNorm = 1.0 / length;
      
      for(i=0; i<sizeOfArray; i++)
        comp[i] *= reciprocalNorm;
    }
//  return *this;
}

//---------------------------------------------------------------------------

inline FArray FArray::normalized() const
{
  unsigned int i;
  double length = norm();
  FArray ret(*this);

  if( length > 1e-15)
  {
      double reciprocalNorm = 1.0 / length;
      
      for(i=0; i<sizeOfArray; i++)
        ret.comp[i] *= reciprocalNorm;
  }
  return ret;
}

//---------------------------------------------------------------------------

inline double FArray::distanceSquare(const FArray& pos2) const
{
#ifndef NODEBUG
  if (sizeOfArray != pos2.sizeOfArray)
    THROW_EXCEPTION( FInvalidDimensionException, "FArrays have different size!!");
#endif
  double dist = 0.0, tmp;

  unsigned int i;
  for (i=0 ; i<sizeOfArray ; i++)
    {  tmp=(comp[i]-pos2.comp[i]);
    dist += tmp*tmp; }
  
  return dist;
}

//---------------------------------------------------------------------------

inline double FArray::distance(const FArray& pos2) const
{ 
  return sqrt(distanceSquare(pos2)); 
}

//---------------------------------------------------------------------------

inline FArray::operator std::vector<double>() const
{
	 return std::vector<double>( comp, comp + sizeOfArray );
}

//---------------------------------------------------------------------------

inline bool FArray::isLessThan( const FArray &b ) const
{
#ifndef NODEBUG
    if (sizeOfArray != b.sizeOfArray)
        THROW_EXCEPTION(FInvalidDimensionException, "FArrays have different size!!");
#endif
    unsigned int i;
    for (i=0; i<sizeOfArray; ++i)
        if(comp[i] >= b.comp[i]) return false;
    return true;
}

//---------------------------------------------------------------------------
//=====================================================================


#undef inline
